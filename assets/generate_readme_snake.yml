# ... (restlicher YAML-Code bleibt gleich) ...
      - name: Generate Custom Snake SVG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Benötigt für den Zugriff auf Contribution-Daten
          GITHUB_USERNAME: Satoramy-PRAI # Dein GitHub-Benutzername
          PIXEL_EMOJI_SVG_PATH: ./assets/pixel_emoji.svg # Pfad zum Pixel-Emoji
          # NEU: Farbdefinitionen für das Grid
          GRID_COLOR_0: "#D3E8FF" # Hellstes Babyblau (0 Contributions)
          GRID_COLOR_1: "#A7CCEF" # Etwas dunkleres Babyblau
          GRID_COLOR_2: "#7AB2DD" # Blau-Grau (Mittel)
          GRID_COLOR_3: "#4D8ECC" # Dunkleres Blau
          GRID_COLOR_4: "#2067BC" # Dunkelstes Blau (Viele Contributions)
        run: |
          python -c '
import requests
import json
import os
import datetime

# Funktion zum Abrufen von Contribution-Daten über die GraphQL API
def get_contributions_from_github(username, token):
    headers = {"Authorization": f"token {token}", "Content-Type": "application/json"}
    # GraphQL Query für Contributions der letzten 365 Tage
    query = """
    query($username: String!) {
      user(login: $username) {
        contributionsCollection {
          contributionCalendar {
            weeks {
              contributionDays {
                date
                contributionCount
              }
            }
          }
        }
      }
    }
    """
    variables = {"username": username}
    response = requests.post("https://api.github.com/graphql", json={"query": query, "variables": variables}, headers=headers)
    response.raise_for_status() # Wirft einen Fehler bei schlechtem Statuscode
    
    data = response.json()["data"]["user"]["contributionsCollection"]["contributionCalendar"]["weeks"]
    
    # Organisiere die Daten in einem einfacher zu handhabenden Format
    contributions_by_date = {}
    for week in data:
        for day in week["contributionDays"]:
            contributions_by_date[day["date"]] = day["contributionCount"]
    
    return contributions_by_date

def generate_snake_svg(contributions_data, pixel_emoji_svg_path, grid_colors):
    # Lade das Pixel-Emoji SVG
    try:
        with open(pixel_emoji_svg_path, "r") as f:
            pixel_emoji_content = f.read()
    except FileNotFoundError:
        pixel_emoji_content = "<rect width=\"16\" height=\"16\" fill=\"#8A2BE2\" />" # Fallback

    cell_size = 15
    padding = 3 # Etwas weniger Padding für dichteres Grid
    width = (53 * cell_size) + (54 * padding) # ~53 Wochen
    height = (7 * cell_size) + (8 * padding)  # 7 Tage

    svg_content = f"""<svg width="{width}" height="{height}" viewBox="0 0 {width} {height}" xmlns="http://www.w3.org/2000/svg">
    <style>
      .bg-cell-0 {{ fill: {grid_colors[0]}; }}
      .bg-cell-1 {{ fill: {grid_colors[1]}; }}
      .bg-cell-2 {{ fill: {grid_colors[2]}; }}
      .bg-cell-3 {{ fill: {grid_colors[3]}; }}
      .bg-cell-4 {{ fill: {grid_colors[4]}; }}
    </style>
    """

    # Generiere das Grid
    # GitHubs Grid beginnt am Sonntag und geht über 53 Wochen
    today = datetime.date.today()
    # Finde den ersten Sonntag des Jahres (oder des relevanten Zeitraums)
    # Ein einfacherer Ansatz ist, einfach 365 Tage rückwärts zu gehen und die Position zu berechnen
    
    # Erstelle ein Datumsobjekt für den Beginn des Grids (ca. ein Jahr zurück vom heutigen Sonntag)
    # Finde den letzten Sonntag vor heute
    start_date = today - datetime.timedelta(days=(today.weekday() + 1) % 7) # Finde letzten Sonntag
    start_date = start_date - datetime.timedelta(weeks=52) # Gehe 52 Wochen zurück

    grid_cells = []
    for week_idx in range(53):
        for day_of_week_idx in range(7):
            current_date = start_date + datetime.timedelta(weeks=week_idx, days=day_of_week_idx)
            date_str = current_date.isoformat()
            
            count = contributions_data.get(date_str, 0) # Echte Daten verwenden
            if count > 4: count = 4 # Max. 4 Stufen für Farben

            x = week_idx * (cell_size + padding) + padding
            y = day_of_week_idx * (cell_size + padding) + padding
            
            svg_content += f"""<rect x="{x}" y="{y}" width="{cell_size}" height="{cell_size}" class="bg-cell-{count}" rx="2" ry="2" />"""
            grid_cells.append({"date": date_str, "x": x + cell_size/2, "y": y + cell_size/2, "count": count})

    # Erzeuge den Snake-Pfad basierend auf den Contributions
    # Hier simulieren wir einen einfachen Pfad, der sich durch Beiträge schlängelt.
    # Eine "echte" Snake-Animation würde eine komplexe Pfad-Algorithmus erfordern.
    # Für den Anfang: eine simple Zickzack-Schlange, die über Zellen mit Beiträgen geht.
    
    snake_path_coords = []
    # Eine sehr vereinfachte Logik, um eine Snake zu generieren, die "irgendwie" über das Grid geht.
    # Eine echte Snake-Action nutzt komplexe Algorithmen. Hier ist eine Grundidee:
    # Beginne irgendwo und bewege dich von Zelle zu Zelle.
    
    # Beispielhafter Pfad (muss verbessert werden für eine "echte" Snake-Animation)
    # Dies wird eine diagonale oder zickzackförmige Schlange sein.
    
    # Wir nehmen eine kleine Untermenge von Zellen, die Contributions haben könnten, um die Snake zu bilden.
    # Die Reihenfolge der Zellen für die Snake muss "logisch" sein.
    # Für einen echten "Snake"-Effekt braucht man die Logik von Platane/snk.
    # Da wir das Emoji *entlang eines Pfades* platzieren wollen, müssen wir den Pfad definieren.
    
    # Vereinfachte Snake: Nehmen wir einfach alle Zellen mit Beiträgen > 0
    # und versuchen, sie sequenziell zu verbinden. Das ist keine "optimale" Snake,
    # aber zeigt die Emojis. Eine echte Snake ist algorithmisch sehr komplex.
    
    # Eine bessere Simulation einer Snake wäre:
    current_x = padding + cell_size / 2
    current_y = padding + cell_size / 2
    snake_length = 100 # Anzahl der Emojis in der Snake
    
    for i in range(snake_length):
        snake_path_coords.append({"x": current_x, "y": current_y})
        # Bewege dich zufällig oder in einem Muster
        # Um eine echte Snake zu imitieren, bräuchte man eine Pfad-Generierung basierend auf der Zeit
        
        # Einfache Zickzack-Bewegung
        if i % 2 == 0:
            current_x += (cell_size + padding) * 0.8
            if current_x > width - padding:
                current_x = padding + cell_size / 2
                current_y += (cell_size + padding) * 1.5 # Gehe zur nächsten Reihe
        else:
            current_y += (cell_size + padding) * 0.8
            if current_y > height - padding:
                current_y = padding + cell_size / 2
                current_x += (cell_size + padding) * 1.5
        
        if current_x > width or current_y > height: # Reset, falls außerhalb des Bereichs
             current_x = padding + cell_size / 2
             current_y = padding + cell_size / 2


    # Füge das Pixel-Emoji entlang des Snake-Pfades ein
    for idx, coord in enumerate(snake_path_coords):
        emoji_x = coord["x"] - (cell_size / 2) # Zentrierung
        emoji_y = coord["y"] - (cell_size / 2) # Zentrierung
        # Einbetten des Emojis als SVG-Element (direkt in die SVG)
        svg_content += f"""<g transform="translate({emoji_x}, {emoji_y}) scale({cell_size/16})">{pixel_emoji_content}</g>"""

    svg_content += "</svg>"
    
    with open("assets/github-contribution-grid-snake.svg", "w") as f:
        f.write(svg_content)

token = os.environ.get("GITHUB_TOKEN")
username = os.environ.get("GITHUB_USERNAME")
pixel_emoji_path = os.environ.get("PIXEL_EMOJI_SVG_PATH")
grid_colors = [
    os.environ.get("GRID_COLOR_0"),
    os.environ.get("GRID_COLOR_1"),
    os.environ.get("GRID_COLOR_2"),
    os.environ.get("GRID_COLOR_3"),
    os.environ.get("GRID_COLOR_4")
]

contributions_data = get_contributions_from_github(username, token)
generate_snake_svg(contributions_data, pixel_emoji_path, grid_colors)
          '
      - name: Commit changes
        run: |
          git add assets/github-contribution-grid-snake.svg
          git diff --staged --quiet || git commit -m "chore: Regenerate custom README snake with real data"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
