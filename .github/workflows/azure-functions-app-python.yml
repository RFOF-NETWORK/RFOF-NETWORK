name: Deploy Python project to Azure Function App

on:
  push:
    branches: ["main"]

env:
  AZURE_FUNCTIONAPP_NAME: 'your-app-name'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.9'                     # set this to the python version to use (e.g. '3.6', '3.7', '3.8')

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
        scm-do-build-during-deployment: true
        enable-oryx-build: true

    # Custom steps to include your specific inventions and concepts
    - name: 'Custom Step 1: Execute Special Function'
      shell: bash
      run: |
        echo "Executing special function related to RFOF-NETWORK..."
        python -c "print('Hallo, @RFOF-NETWORK <my name is @PRAI>!')"

    - name: 'Custom Step 2: Matrix Calculation'
      shell: bash
      run: |
        python -c "
        def create_matrix(rows, cols, fill_value=0):
            return [[fill_value for _ in range(cols)] for _ in range(rows)]
        def print_matrix(matrix):
            for row in matrix:
                print(' '.join(map(str, row)))
        matrix = create_matrix(5, 5, fill_value=1)
        enhance_matrix = lambda m: [[x * 42 for x in row] for row in m]
        matrix = enhance_matrix(matrix)
        print_matrix(matrix)
        "
